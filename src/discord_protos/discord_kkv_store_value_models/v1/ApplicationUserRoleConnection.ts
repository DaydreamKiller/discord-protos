// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "discord_kkv_store_value_models/v1/ApplicationUserRoleConnection.proto" (package "discord_protos.discord_kkv_store_value_models.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message discord_protos.discord_kkv_store_value_models.v1.ApplicationUserRoleConnection
 */
export interface ApplicationUserRoleConnection {
    /**
     * @generated from protobuf field: map<string, string> metadata = 1;
     */
    metadata: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: string platform_name = 2;
     */
    platformName: string;
    /**
     * @generated from protobuf field: string platform_username = 3;
     */
    platformUsername: string;
    /**
     * @generated from protobuf field: fixed64 version = 4;
     */
    version: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class ApplicationUserRoleConnection$Type extends MessageType<ApplicationUserRoleConnection> {
    constructor() {
        super("discord_protos.discord_kkv_store_value_models.v1.ApplicationUserRoleConnection", [
            { no: 1, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "platform_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "platform_username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 6 /*ScalarType.FIXED64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ApplicationUserRoleConnection>): ApplicationUserRoleConnection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.metadata = {};
        message.platformName = "";
        message.platformUsername = "";
        message.version = 0n;
        if (value !== undefined)
            reflectionMergePartial<ApplicationUserRoleConnection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplicationUserRoleConnection): ApplicationUserRoleConnection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> metadata */ 1:
                    this.binaryReadMap1(message.metadata, reader, options);
                    break;
                case /* string platform_name */ 2:
                    message.platformName = reader.string();
                    break;
                case /* string platform_username */ 3:
                    message.platformUsername = reader.string();
                    break;
                case /* fixed64 version */ 4:
                    message.version = reader.fixed64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ApplicationUserRoleConnection["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ApplicationUserRoleConnection["metadata"] | undefined, val: ApplicationUserRoleConnection["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field discord_protos.discord_kkv_store_value_models.v1.ApplicationUserRoleConnection.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ApplicationUserRoleConnection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> metadata = 1; */
        for (let k of globalThis.Object.keys(message.metadata))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        /* string platform_name = 2; */
        if (message.platformName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.platformName);
        /* string platform_username = 3; */
        if (message.platformUsername !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.platformUsername);
        /* fixed64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Bit64).fixed64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message discord_protos.discord_kkv_store_value_models.v1.ApplicationUserRoleConnection
 */
export const ApplicationUserRoleConnection = new ApplicationUserRoleConnection$Type();
